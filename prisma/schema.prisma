generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(cuid())
  lineUserId  String     @unique
  displayName String?
  pictureUrl  String?
  email       String?
  phone       String?
  role        UserRole   @default(CUSTOMER)
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  addresses   Address[]
  cartItems   CartItem[]
  orders      Order[]
  reviews     Review[]

  @@map("users")
}

model Address {
  id          String   @id @default(cuid())
  userId      String
  name        String
  phone       String
  address     String
  district    String
  subDistrict String
  province    String
  postalCode  String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]

  @@map("addresses")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  imageUrl    String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model Product {
  id           String         @id @default(cuid())
  name         String
  description  String?
  price        Decimal        @db.Decimal(10, 2)
  comparePrice Decimal?       @db.Decimal(10, 2)
  sku          String?        @unique
  stock        Int            @default(0)
  weight       Decimal?       @db.Decimal(8, 2)
  isActive     Boolean        @default(true)
  isFeatured   Boolean        @default(false)
  sortOrder    Int            @default(0)
  image        String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  categoryId   String
  cartItems    CartItem[]
  orderItems   OrderItem[]
  images       ProductImage[]
  category     Category       @relation(fields: [categoryId], references: [id])
  reviews      Review[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  imageUrl  String
  altText   String?
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id              String           @id @default(cuid())
  orderNumber     String           @unique
  userId          String
  addressId       String
  status          OrderStatus      @default(PENDING)
  paymentStatus   PaymentStatus    @default(PENDING)
  paymentMethod   PaymentMethod?
  shippingMethod  ShippingMethod?
  paymentSlipUrl  String?
  subtotal        Decimal          @db.Decimal(10, 2)
  shippingFee     Decimal          @default(0) @db.Decimal(10, 2)
  tax             Decimal          @default(0) @db.Decimal(10, 2)
  discount        Decimal          @default(0) @db.Decimal(10, 2)
  total           Decimal          @db.Decimal(10, 2)
  notes           String?
  trackingNumber  String?
  shippedAt       DateTime?
  deliveredAt     DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  orderItems      OrderItem[]
  orderStatusLogs OrderStatusLog[]
  address         Address          @relation(fields: [addressId], references: [id])
  user            User             @relation(fields: [userId], references: [id])
  reviews         Review[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  total     Decimal  @db.Decimal(10, 2)
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  reviews   Review[]

  @@map("order_items")
}

model OrderStatusLog {
  id        String      @id @default(cuid())
  orderId   String
  status    OrderStatus
  notes     String?
  createdAt DateTime    @default(now())
  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_status_logs")
}

model Review {
  id          String        @id @default(cuid())
  userId      String
  productId   String
  rating      Int
  comment     String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  isHelpful   Int           @default(0)
  isVerified  Boolean       @default(false)
  orderId     String
  orderItemId String
  mediaFiles  ReviewMedia[]
  order       Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderItem   OrderItem     @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  product     Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, orderItemId])
  @@map("reviews")
}

model ReviewMedia {
  id           String    @id @default(cuid())
  reviewId     String
  mediaType    MediaType
  mediaUrl     String
  thumbnailUrl String?
  fileName     String?
  fileSize     Int?
  duration     Int?
  altText      String?
  sortOrder    Int       @default(0)
  createdAt    DateTime  @default(now())
  review       Review    @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@map("review_media")
}

model ReviewHelpful {
  id        String   @id @default(cuid())
  reviewId  String
  userId    String
  isHelpful Boolean
  createdAt DateTime @default(now())

  @@unique([reviewId, userId])
  @@map("review_helpful")
}

model Contact {
  id          String              @id @default(cuid())
  name        String
  phone       String
  email       String
  message     String
  status      ContactStatus       @default(PENDING)
  adminNotes  String?
  resolvedAt  DateTime?
  resolvedBy  String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  issueType   String
  attachments ContactAttachment[]

  @@map("contacts")
}

model ContactAttachment {
  id             String         @id @default(cuid())
  contactId      String
  fileName       String
  fileType       String
  fileSize       Int
  createdAt      DateTime       @default(now())
  attachmentType AttachmentType
  filePath       String
  contact        Contact        @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@map("contact_attachments")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  PROMPTPAY
  BANK_TRANSFER
  COD
  LINE_PAY
}

enum ShippingMethod {
  TH_POST
  TH_EXPRESS
}

enum MediaType {
  IMAGE
  VIDEO
}

enum ContactStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum AttachmentType {
  IMAGE
  PDF
  DOC
}
